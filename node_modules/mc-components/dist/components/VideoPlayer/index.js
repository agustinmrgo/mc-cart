"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _get = _interopRequireDefault(require("lodash/get"));

var _times = _interopRequireDefault(require("lodash/times"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _VideoPlayerScreen = _interopRequireDefault(require("../VideoPlayerScreen"));

var _Button = _interopRequireDefault(require("../Button"));

var _Icons = _interopRequireDefault(require("../Icons"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VOLUME_INTERVAL = 0.05;
var SKIP_INTERVAL = 5;
var SCREEN_BEFORE = 'SCREEN_BEFORE';
var SCREEN_END = 'SCREEN_END';
var SCREEN_PAUSE = 'SCREEN_PAUSE';
var SCREEN_NONE = 'SCREEN_NONE';
var FILL_WIDTH = 'width';
var FILL_HEIGHT = 'height';
var FILL_NONE = null;
var CC_HIDDEN = 'hidden';

var VideoPlayer =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(VideoPlayer, _PureComponent);

  function VideoPlayer(props) {
    var _this;

    _classCallCheck(this, VideoPlayer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoPlayer).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "currentTime", undefined);

    _defineProperty(_assertThisInitialized(_this), "state", {
      screen: SCREEN_NONE,
      fill: FILL_NONE,
      mutedAutoplay: false
    });

    _defineProperty(_assertThisInitialized(_this), "setupScript", function () {
      var _this$props = _this.props,
          playerId = _this$props.playerId,
          accountId = _this$props.accountId;
      var script = document.createElement('script');
      script.src = "//players.brightcove.net/".concat(accountId, "/").concat(playerId, "_default/index.min.js");
      document.body.appendChild(script);
      script.onload = _this.setupVideo;
    });

    _defineProperty(_assertThisInitialized(_this), "setupVideo", function () {
      window.bc(_this.playerRef.current, {
        playbackRates: [0.5, 1, 1.5, 2]
      });
      _this.video = window.videojs(_this.playerRef.current);

      _this.video.ready(_this.handlePlayerReady);
    });

    _defineProperty(_assertThisInitialized(_this), "handlePlayerReady", function () {
      var onPlayerReady = _this.props.onPlayerReady; // eslint-disable-next-line

      _this.setState({
        videoRoot: _this.video.el_
      });

      _this.video.on('loadedmetadata', _this.handleReady);

      _this.video.on('play', _this.handlePlay);

      _this.video.on('pause', _this.handlePause);

      _this.video.on('ended', _this.handleEnd);

      _this.video.on('seeking', _this.handleSeeking);

      _this.video.on('seeked', _this.handleSeeked);

      _this.video.on('fullscreenchange', _this.handleFullscreenChange);

      _this.video.on('error', _this.handleError);

      if (onPlayerReady) {
        onPlayerReady(_this.video);
      }

      _this.startSecondsTimer();

      _this.calculateFill();
    });

    _defineProperty(_assertThisInitialized(_this), "handleReady", function () {
      var _this$props2 = _this.props,
          hasAutoplay = _this$props2.hasAutoplay,
          isMuted = _this$props2.isMuted,
          onVideoReady = _this$props2.onVideoReady;

      if (isMuted) {
        _this.video.muted(true);
      }

      if (hasAutoplay) {
        var play = _this.video.play();

        if (play["catch"]) {
          play["catch"](_this.mutePlay);
        }
      }

      _this.checkBuffers();

      _this.turnOffCaptions();

      if (onVideoReady) {
        onVideoReady(_this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "play", function () {
      if (_this.props.hasAutoplay) {
        _this.unmutePlay();
      } else {
        _this.video.play();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "mutePlay", function () {
      _this.video.muted(true);

      var play = _this.video.play();

      if (play["catch"]) {
        play.then(function () {
          return _this.setState({
            mutedAutoplay: true
          });
        })["catch"](function () {});
      }
    });

    _defineProperty(_assertThisInitialized(_this), "unmutePlay", function () {
      _this.video.muted(false);

      _this.video.play();

      _this.setState({
        mutedAutoplay: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "turnOffCaptions", function () {
      var tracks = _this.video.textTracks();

      (0, _times["default"])(tracks.length).forEach(function (i) {
        tracks[i].mode = CC_HIDDEN;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handlePlay", function () {
      var onPlay = _this.props.onPlay;

      _this.setState({
        screen: SCREEN_NONE
      });

      if (onPlay) {
        onPlay(_this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handlePause", function () {
      var onPause = _this.props.onPause;

      if (_this.video.seeking() || _this.isAtEndOfVideo()) {
        return;
      }

      _this.setState({
        screen: SCREEN_PAUSE
      });

      if (onPause) {
        onPause(_this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "isAtEndOfVideo", function () {
      var duration = Math.floor(_this.video.duration());
      var position = Math.floor(_this.video.currentTime());
      return duration === position;
    });

    _defineProperty(_assertThisInitialized(_this), "handleSeeking", function () {
      var onSeek = _this.props.onSeek;

      _this.setState({
        screen: SCREEN_NONE
      });

      if (onSeek) {
        onSeek(_this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSeeked", function () {
      var onSeeked = _this.props.onSeeked;

      if (onSeeked) {
        onSeeked(_this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleEnd", function () {
      _this.currentTime = undefined;
      var _this$props3 = _this.props,
          isLooped = _this$props3.isLooped,
          endscreenComponent = _this$props3.endscreenComponent,
          onEnd = _this$props3.onEnd;

      if (isLooped) {
        _this.video.play();
      } else if (endscreenComponent) {
        _this.setState({
          screen: SCREEN_END
        });
      }

      if (onEnd) {
        onEnd(_this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFullscreenChange", function () {
      var onFullscreenChange = _this.props.onFullscreenChange;

      if (onFullscreenChange) {
        onFullscreenChange(_this.video.isFullscreen());
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleReplayClick", function () {
      _this.play();

      _this.setState({
        screen: SCREEN_NONE
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleResume", function () {
      _this.play();
    });

    _defineProperty(_assertThisInitialized(_this), "handleError", function () {
      var onError = _this.props.onError;

      if (onError) {
        var error = _this.video.error();

        onError(error, _this.video);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      var target = e.target,
          key = e.key;
      var selectingVolume = target.className.indexOf('vjs-volume-bar') > -1 || target.className.indexOf('vjs-volume-menu-button') > -1;

      if (selectingVolume) {
        // trying to prevent these listeners from affecting accessibility controls
        return;
      }

      switch (key) {
        case 'ArrowLeft':
          {
            e.preventDefault();

            _this.skipBackwards();

            break;
          }

        case 'ArrowRight':
          {
            e.preventDefault();

            _this.skipForward();

            break;
          }

        case ' ':
          {
            e.preventDefault();

            _this.playPause();

            break;
          }

        case 'ArrowUp':
          {
            e.preventDefault();

            _this.increaseVolume();

            break;
          }

        case 'ArrowDown':
          {
            e.preventDefault();

            _this.decreaseVolume();

            break;
          }

        default:
      }
    });

    _defineProperty(_assertThisInitialized(_this), "increaseVolume", function () {
      var currentVolume = _this.video.volume();

      var newVolume = Math.min(currentVolume + VOLUME_INTERVAL, 1);

      _this.video.volume(newVolume);
    });

    _defineProperty(_assertThisInitialized(_this), "decreaseVolume", function () {
      var currentVolume = _this.video.volume();

      var newVolume = Math.max(currentVolume - VOLUME_INTERVAL, 0);

      _this.video.volume(newVolume);
    });

    _defineProperty(_assertThisInitialized(_this), "playPause", function () {
      if (_this.video.paused()) {
        _this.video.play();
      } else {
        _this.video.pause();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "skipForward", function () {
      var currentTime = Math.floor(_this.video.currentTime());
      var newTime = Math.min(_this.video.duration(), currentTime + SKIP_INTERVAL);

      _this.video.currentTime(newTime);
    });

    _defineProperty(_assertThisInitialized(_this), "skipBackwards", function () {
      var currentTime = Math.floor(_this.video.currentTime());
      var newTime = Math.max(0, currentTime - SKIP_INTERVAL);

      _this.video.currentTime(newTime);
    });

    _defineProperty(_assertThisInitialized(_this), "replaceWith", function (videoId) {
      // Close all overlays
      if (_this.video.customOverlay) {
        _this.video.customOverlay.close();
      }

      _this.setState({
        screen: SCREEN_NONE
      });

      _this.video.catalog.getVideo(videoId, function (error, video) {
        if (error && _this.props.onError) {
          _this.props.onError(error, _this.video);

          return;
        }

        _this.video.catalog.load(video);

        _this.currentTime = undefined;

        _this.play();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "startSecondsTimer", function () {
      if (_this.props.onTimeChange) {
        _this.video.on('timeupdate', function () {
          var currentTime = Math.floor(_this.video.currentTime());
          var remainingTime = Math.floor(_this.video.remainingTime());

          if (_this.currentTime === undefined || _this.currentTime !== currentTime) {
            _this.currentTime = currentTime;

            _this.props.onTimeChange(currentTime, remainingTime);
          }
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "checkBuffers", function () {
      var _this$props4 = _this.props,
          videoId = _this$props4.videoId,
          hasAutoplay = _this$props4.hasAutoplay;
      var hls = (0, _get["default"])(_this.video, 'tech_.hls');
      var videoBuffer = (0, _get["default"])(_this.video, 'tech_.hls.mediaSource.videoBuffer_');
      var audioBuffer = (0, _get["default"])(_this.video, 'tech_.hls.mediaSource.videoBuffer_');

      if (hls && videoBuffer && !audioBuffer) {
        _this.video.reset();

        _this.video.catalog.getVideo(videoId, function (error, video) {
          if (error && _this.props.onError) {
            _this.props.onError(error, _this.video);

            return;
          }

          _this.video.catalog.load(video);

          if (hasAutoplay) {
            var promise = _this.video.play();

            if (promise !== undefined) {
              promise["catch"](function () {});
            }
          }
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "calculateFill", function () {
      var container = _this.playerRef.current;
      var videoRatio = 16 / 9;
      var playerRatio = container.offsetWidth / container.offsetHeight;
      var fill = playerRatio > videoRatio ? FILL_WIDTH : FILL_HEIGHT;

      _this.setState({
        fill: fill
      });
    });

    _this.playerRef = props.playerRef || _react["default"].createRef();
    return _this;
  }

  _createClass(VideoPlayer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props5 = this.props,
          progress = _this$props5.progress,
          beforescreenComponent = _this$props5.beforescreenComponent;

      if (window.bc && window.videojs) {
        this.setupVideo();
      } else {
        this.setupScript();
      }

      if (progress) {
        this.playerRef.current.currentTime = progress;
      }

      if (beforescreenComponent) {
        this.setState({
          screen: SCREEN_BEFORE
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.videoId !== prevProps.videoId) {
        this.replaceWith(this.props.videoId);
      }

      if (this.props.hasAutoplay !== prevProps.hasAutoplay) {
        this.play();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Don't run cleanup if video instance doesn't exist
      if (!this.video) {
        return;
      } // Cleanup


      this.video.off('play');
      this.video.off('pause');
      this.video.off('ended');
      this.video.off('seeking');
      this.video.off('seeked');
      this.video.off('fullscreenchange');
      this.video.off('loadedmetadata');
      this.video.dispose();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          beforescreenComponent = _this$props6.beforescreenComponent,
          pausescreenComponent = _this$props6.pausescreenComponent,
          endscreenComponent = _this$props6.endscreenComponent,
          accountId = _this$props6.accountId,
          playerId = _this$props6.playerId,
          videoId = _this$props6.videoId,
          hasAutoplay = _this$props6.hasAutoplay,
          hasControls = _this$props6.hasControls,
          isMuted = _this$props6.isMuted,
          isLooped = _this$props6.isLooped,
          onPlayerReady = _this$props6.onPlayerReady,
          onVideoReady = _this$props6.onVideoReady,
          onPlay = _this$props6.onPlay,
          onPause = _this$props6.onPause,
          onEnd = _this$props6.onEnd,
          onTimeChange = _this$props6.onTimeChange,
          onSeek = _this$props6.onSeek,
          onSeeked = _this$props6.onSeeked,
          onFullscreenChange = _this$props6.onFullscreenChange,
          restProps = _objectWithoutProperties(_this$props6, ["beforescreenComponent", "pausescreenComponent", "endscreenComponent", "accountId", "playerId", "videoId", "hasAutoplay", "hasControls", "isMuted", "isLooped", "onPlayerReady", "onVideoReady", "onPlay", "onPause", "onEnd", "onTimeChange", "onSeek", "onSeeked", "onFullscreenChange"]);

      var _this$state = this.state,
          screen = _this$state.screen,
          videoRoot = _this$state.videoRoot,
          fill = _this$state.fill;
      var isScreenOpen = screen !== SCREEN_NONE;
      var isScreenBefore = screen === SCREEN_BEFORE;
      var containerClasses = (0, _classnames["default"])({
        'bc-player': true,
        'bc-player--screen-open': isScreenOpen,
        'bc-player--beforescreen-open': isScreenBefore
      });
      var playerClasses = (0, _classnames["default"])(_defineProperty({
        'bc-player__video': true,
        'bc-player__video--default': true,
        'video-js': true,
        'vjs-tech': true
      }, "vjs-fill-".concat(fill), !!fill));
      return _react["default"].createElement("div", {
        className: containerClasses,
        onKeyDown: this.handleKeyDown
      }, _react["default"].createElement("div", {
        className: "bc-player__wrapper"
      }, _react["default"].createElement("video", _extends({
        "data-application-id": true,
        ref: this.playerRef,
        className: playerClasses,
        "data-embed": "default",
        "data-account": accountId,
        "data-player-id": playerId,
        "data-video-id": videoId,
        autoPlay: hasAutoplay,
        controls: hasControls,
        muted: isMuted
      }, restProps))), beforescreenComponent && _react["default"].createElement(_VideoPlayerScreen["default"], {
        isActive: screen === SCREEN_BEFORE,
        variation: "beforescreen",
        videoRoot: videoRoot
      }, (0, _helpers.renderChildren)(beforescreenComponent, {
        onResume: this.handleResume,
        isActive: screen === SCREEN_BEFORE
      })), pausescreenComponent && _react["default"].createElement(_VideoPlayerScreen["default"], {
        isActive: screen === SCREEN_PAUSE,
        variation: "pausescreen",
        videoRoot: videoRoot
      }, (0, _helpers.renderChildren)(pausescreenComponent, {
        onResume: this.handleResume,
        isActive: screen === SCREEN_PAUSE
      })), endscreenComponent && _react["default"].createElement(_VideoPlayerScreen["default"], {
        isActive: screen === SCREEN_END,
        variation: "endscreen",
        videoRoot: videoRoot
      }, (0, _helpers.renderChildren)(endscreenComponent, {
        onReplay: this.handleReplayClick,
        isActive: screen === SCREEN_END
      })), this.state.mutedAutoplay && _react["default"].createElement(_Button["default"], {
        kind: "secondary",
        className: "bc-player__autoplay-unmute",
        onClick: this.unmutePlay
      }, _react["default"].createElement(_Icons["default"], {
        kind: "muted",
        className: "mc-mr-3"
      }), "Tap to Unmute"));
    }
  }]);

  return VideoPlayer;
}(_react.PureComponent);

exports["default"] = VideoPlayer;

_defineProperty(VideoPlayer, "propTypes", {
  accountId: _propTypes["default"].string,
  playerId: _propTypes["default"].string,
  videoId: _propTypes["default"].string.isRequired,
  endscreenComponent: _propTypes["default"].func,
  beforescreenComponent: _propTypes["default"].func,
  pausescreenComponent: _propTypes["default"].func,
  hasAutoplay: _propTypes["default"].bool,
  hasControls: _propTypes["default"].bool,
  isLooped: _propTypes["default"].bool,
  isMuted: _propTypes["default"].bool,
  playerRef: _propTypes["default"].any,
  progress: _propTypes["default"].number,
  onPlayerReady: _propTypes["default"].func,
  onVideoReady: _propTypes["default"].func,
  onPlay: _propTypes["default"].func,
  onPause: _propTypes["default"].func,
  onEnd: _propTypes["default"].func,
  onTimeChange: _propTypes["default"].func,
  onFullscreenChange: _propTypes["default"].func,
  onError: _propTypes["default"].func,
  onSeek: _propTypes["default"].func,
  onSeeked: _propTypes["default"].func
});

_defineProperty(VideoPlayer, "defaultProps", {
  accountId: '5344802162001',
  playerId: '1cMNiwC9oQ',
  videoId: '5450137526001',
  hasAutoplay: false,
  hasControls: false,
  isMuted: false,
  isLooped: false
});