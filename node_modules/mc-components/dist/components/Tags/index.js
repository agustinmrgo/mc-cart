"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Badge = _interopRequireDefault(require("../Badge"));

var _Icons = _interopRequireDefault(require("../Icons"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var KEY_ESCAPE = 'Escape';
var KEY_BACKSPACE = 'Backspace';
var KEY_TAB = 'Tab';
var KEY_ENTER = 'Enter';
var KEY_COMMA = ',';
var KEY_SEMICOLON = ';';
var KEYS_ACCEPT = [KEY_TAB, KEY_ENTER, KEY_COMMA, KEY_SEMICOLON];
var VALUE_EMPTY = '';

var Tags = function Tags(_ref) {
  var _ref$collection = _ref.collection,
      collection = _ref$collection === void 0 ? [] : _ref$collection,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;
  var inputRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(VALUE_EMPTY),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      focus = _useState4[0],
      setFocus = _useState4[1];

  var handleContainerClick = function handleContainerClick() {
    if (!inputRef.current) return;
    inputRef.current.focus();
  };

  var handleInputFocus = function handleInputFocus() {
    setFocus(true);
  };

  var handleInputBlur = function handleInputBlur() {
    setFocus(false);
  };

  var handleInputChange = function handleInputChange(event) {
    setValue(event.target.value);
  };

  var handleAcceptDown = function handleAcceptDown(event) {
    if (value === VALUE_EMPTY) return;
    event.preventDefault();
    onChange([].concat(_toConsumableArray(collection), [value]));
    setValue(VALUE_EMPTY);
  };

  var handleEscapeDown = function handleEscapeDown() {
    setValue(VALUE_EMPTY);
  };

  var handleBackspaceDown = function handleBackspaceDown() {
    if (value !== VALUE_EMPTY) return;
    onChange(collection.slice(0, -1));
  };

  var handleKeyDown = function handleKeyDown(event) {
    if (KEYS_ACCEPT.includes(event.key)) handleAcceptDown(event);
    if (event.key === KEY_ESCAPE) handleEscapeDown(event);
    if (event.key === KEY_BACKSPACE) handleBackspaceDown(event);
  };

  var handleRemoveClick = function handleRemoveClick(index) {
    return function () {
      var newCollection = _toConsumableArray(collection);

      newCollection.splice(index, 1);
      onChange(newCollection);
    };
  };

  var containerClasses = (0, _classnames["default"])({
    'mc-form-element mc-form-tags': true,
    'mc-form-element--focus': focus
  });
  return _react["default"].createElement("div", {
    className: containerClasses,
    onClick: handleContainerClick
  }, collection.map(function (item, index) {
    return _react["default"].createElement("div", {
      className: "mc-form-tags__tag",
      key: item
    }, _react["default"].createElement(_Badge["default"], null, item, _react["default"].createElement(_Icons["default"], {
      kind: "close",
      onClick: handleRemoveClick(index),
      className: "mc-icon mc-mr-n2 mc-ml-1 mc-clickable"
    })));
  }), _react["default"].createElement("input", {
    type: "text",
    ref: inputRef,
    className: "mc-form-element__element",
    onChange: handleInputChange,
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    onKeyDown: handleKeyDown,
    size: value.length || 1,
    value: value
  }));
};

Tags.propTypes = {
  collection: _propTypes["default"].arrayOf(_propTypes["default"].string),
  onChange: _propTypes["default"].func
};
var _default = Tags;
exports["default"] = _default;