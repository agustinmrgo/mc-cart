"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _constants = require("../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var STATE_BROWSER_TYPES = ['webkit', 'moz', 'ms'];
var STATE_BROWSER_TYPE_DEFAULT = 'standard';

var getBrowserType = function getBrowserType() {
  var browserType = STATE_BROWSER_TYPE_DEFAULT;

  if (!document.fullscreenEnabled) {
    STATE_BROWSER_TYPES.forEach(function (type) {
      var isSupported = !!document["".concat(type, "FullscreenEnabled")];

      if (isSupported) {
        browserType = type;
      }
    });
  }

  return browserType;
};

var Fullscreen =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Fullscreen, _PureComponent);

  function Fullscreen(props) {
    var _this;

    _classCallCheck(this, Fullscreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Fullscreen).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      browserType: STATE_BROWSER_TYPE_DEFAULT
    });

    _defineProperty(_assertThisInitialized(_this), "fullscreenElement", _react["default"].createRef());

    _this.state = {
      browserType: getBrowserType()
    };
    return _this;
  }

  _createClass(Fullscreen, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.isFullscreen !== this.props.isFullscreen) {
        if (this.props.isFullscreen) {
          this.enterFullscreen();
        } else {
          this.exitFullscreen();
        }
      }
    }
  }, {
    key: "enterFullscreen",
    value: function enterFullscreen() {
      var browserType = this.state.browserType;

      if (browserType === STATE_BROWSER_TYPE_DEFAULT) {
        this.fullscreenElement.current.requestFullscreen();
      } else {
        var methodName = "".concat(browserType, "RequestFullscreen");
        this.fullscreenElement.current[methodName]();
      }
    }
  }, {
    key: "exitFullscreen",
    value: function exitFullscreen() {
      var browserType = this.state.browserType;

      if (browserType === STATE_BROWSER_TYPE_DEFAULT) {
        document.exitFullscreen();
      } else if (browserType === 'moz') {
        document.mozCancelFullscreen();
      } else {
        document["".concat(browserType, "ExitFullscreen")]();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return _react["default"].createElement("div", {
        className: "mc-fullscreen",
        ref: this.fullscreenElement
      }, children);
    }
  }]);

  return Fullscreen;
}(_react.PureComponent);

exports["default"] = Fullscreen;

_defineProperty(Fullscreen, "propTypes", {
  isFullscreen: _propTypes.bool.isRequired,
  children: _constants.PROP_TYPE_CHILDREN.isRequired
});