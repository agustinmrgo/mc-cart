"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PLACEMENTS = exports.Consumer = exports.Provider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _popper = _interopRequireDefault(require("popper.js"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TooltipContext = _react["default"].createContext('tooltip');

var Provider = TooltipContext.Provider,
    Consumer = TooltipContext.Consumer;
exports.Consumer = Consumer;
exports.Provider = Provider;
var PLACEMENTS = ['bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start'];
exports.PLACEMENTS = PLACEMENTS;

var PROP_TYPE_PLACEMENT = _propTypes["default"].oneOf(PLACEMENTS);

var Tooltip =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Tooltip, _PureComponent);

  function Tooltip() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tooltip)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      show: false
    });

    _defineProperty(_assertThisInitialized(_this), "toggleRef", _react["default"].createRef());

    _defineProperty(_assertThisInitialized(_this), "tooltipRef", _react["default"].createRef());

    _defineProperty(_assertThisInitialized(_this), "arrowRef", _react["default"].createRef());

    _defineProperty(_assertThisInitialized(_this), "renderTooltip", function () {
      var placement = _this.props.placement;
      _this.tooltip = new _popper["default"]((0, _reactDom.findDOMNode)(_this.toggleRef.current), _this.tooltipRef.current, {
        placement: placement,
        modifiers: {
          arrow: {
            element: _this.arrowRef.current
          },
          applyStyle: {
            enabled: true,
            fn: _this.applyStyle
          }
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggle", function () {
      _this.tooltip.update();

      _this.setState(function (prevState) {
        return {
          show: !prevState.show
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "applyStyle", function (data) {
      _this.setState({
        arrowStyles: data.arrowStyles,
        attributes: data.attributes,
        styles: data.styles
      });

      return data;
    });

    return _this;
  }

  _createClass(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderTooltip();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.placement !== this.props.placement) {
        this.renderTooltip();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var _this$state = this.state,
          arrowStyles = _this$state.arrowStyles,
          attributes = _this$state.attributes,
          show = _this$state.show,
          styles = _this$state.styles;
      return _react["default"].createElement(Provider, {
        value: {
          arrowRef: this.arrowRef,
          arrowStyles: arrowStyles,
          attributes: attributes,
          show: show,
          styles: styles,
          toggle: this.toggle,
          toggleRef: this.toggleRef,
          tooltipRef: this.tooltipRef
        }
      }, children);
    }
  }]);

  return Tooltip;
}(_react.PureComponent);

exports["default"] = Tooltip;

_defineProperty(Tooltip, "propTypes", {
  children: _constants.PROP_TYPE_CHILDREN,
  placement: PROP_TYPE_PLACEMENT
});

_defineProperty(Tooltip, "defaultProps", {
  placement: 'top'
});