"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Video = require("./Video");

var _Button = _interopRequireDefault(require("../Button"));

var _Icons = _interopRequireDefault(require("../Icons"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Playback = function Playback() {
  var _icons;

  var _useContext = (0, _react.useContext)(_Video.VideoContext),
      state = _useContext.state,
      togglePlay = _useContext.togglePlay;

  var icons = (_icons = {}, _defineProperty(_icons, _Video.STATE_PLAYING, 'pause'), _defineProperty(_icons, _Video.STATE_ENDED, 'replay'), _icons);
  var icon = icons[state] || 'play';
  return _react["default"].createElement("div", {
    className: "mc-video__playback mc-video__control"
  }, _react["default"].createElement(_Button["default"], {
    onClick: togglePlay,
    kind: "link",
    size: "small"
  }, _react["default"].createElement(_Icons["default"], {
    kind: icon,
    className: "mc-icon mc-icon--4"
  })));
};

var _default = Playback;
exports["default"] = _default;