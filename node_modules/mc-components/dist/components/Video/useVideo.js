"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _hls = _interopRequireDefault(require("hls.js"));

var _useBind = _interopRequireDefault(require("./useBind"));

var _Video = require("./Video");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SEEK_AMOUNT = 5;
var VOLUME_AMOUNT = 0.1;

var minMax = function minMax(value, min, max) {
  return Math.min(Math.max(value, min), max);
};

var useVideo = function useVideo() {
  var videoRef = (0, _react.useRef)(null);
  var containerRef = (0, _react.useRef)(null);
  var documentRef = (0, _react.useRef)(document);
  var hlsRef = (0, _react.useRef)(new _hls["default"]());

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      active = _useState2[0],
      saveActive = _useState2[1];

  var _useState3 = (0, _react.useState)(_Video.STATE_IDLE),
      _useState4 = _slicedToArray(_useState3, 2),
      state = _useState4[0],
      saveState = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      time = _useState6[0],
      saveTime = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      duration = _useState8[0],
      saveDuration = _useState8[1];

  var _useState9 = (0, _react.useState)(0),
      _useState10 = _slicedToArray(_useState9, 2),
      buffer = _useState10[0],
      saveBuffer = _useState10[1];

  var _useState11 = (0, _react.useState)(false),
      _useState12 = _slicedToArray(_useState11, 2),
      muted = _useState12[0],
      saveMuted = _useState12[1];

  var _useState13 = (0, _react.useState)(1),
      _useState14 = _slicedToArray(_useState13, 2),
      volume = _useState14[0],
      saveVolume = _useState14[1];

  var _useState15 = (0, _react.useState)(1),
      _useState16 = _slicedToArray(_useState15, 2),
      speed = _useState16[0],
      saveSpeed = _useState16[1];

  var _useState17 = (0, _react.useState)([]),
      _useState18 = _slicedToArray(_useState17, 2),
      levels = _useState18[0],
      saveLevels = _useState18[1];

  var _useState19 = (0, _react.useState)(-1),
      _useState20 = _slicedToArray(_useState19, 2),
      level = _useState20[0],
      saveLevel = _useState20[1];

  var _useState21 = (0, _react.useState)(false),
      _useState22 = _slicedToArray(_useState21, 2),
      fullscreen = _useState22[0],
      saveFullscreen = _useState22[1];

  var hasStarted = function hasStarted() {
    return state !== _Video.STATE_IDLE;
  };

  var isPaused = function isPaused() {
    return state === _Video.STATE_PAUSED;
  };

  var isPlaying = function isPlaying() {
    return state === _Video.STATE_PLAYING;
  };

  var toggleFullscreen = function toggleFullscreen() {
    if (fullscreen) {
      document.exitFullscreen();
    } else {
      containerRef.current.requestFullscreen();
    }
  };

  var togglePlay = function togglePlay() {
    videoRef.current[isPlaying() ? 'pause' : 'play']();
  };

  var setTime = function setTime(newTime) {
    // eslint-disable-next-line no-param-reassign
    videoRef.current.currentTime = minMax(newTime, 0, duration);
  };

  var adjustTime = function adjustTime(amount) {
    setTime(videoRef.current.currentTime + amount);
  };

  var setLevel = function setLevel(level) {
    hlsRef.current.nextLevel = level;
    saveLevel(level);
  };

  var setSpeed = function setSpeed(rate) {
    // eslint-disable-next-line no-param-reassign
    videoRef.current.playbackRate = rate;
  };

  var toggleMute = function toggleMute() {
    // eslint-disable-next-line no-param-reassign
    videoRef.current.muted = !videoRef.current.muted;
  };

  var setVolume = function setVolume(level) {
    // eslint-disable-next-line no-param-reassign
    videoRef.current.volume = minMax(level, 0, 1); // eslint-disable-next-line no-param-reassign

    videoRef.current.muted = false;
  };

  var adjustVolume = function adjustVolume(amount) {
    setVolume(videoRef.current.volume + amount);
  };

  (0, _useBind["default"])(videoRef, {
    timeupdate: function handleTimeUpdate(event) {
      saveTime(event.target.currentTime);
    },
    durationchange: function handleDurationChange(event) {
      saveDuration(event.target.duration);
    },
    progress: function handleProgress(event) {
      saveBuffer(event.target.buffered.end(event.target.buffered.length - 1));
    },
    ratechange: function handleRateChange(event) {
      saveSpeed(event.target.playbackRate);
    },
    volumechange: function handleVolumeChange(event) {
      if (event.target.volume === 0 || event.target.muted) {
        saveVolume(0);
        saveMuted(true);
      } else {
        saveVolume(event.target.volume);
        saveMuted(event.target.muted);
      }
    },
    play: function handlePlay() {
      saveState(_Video.STATE_PLAYING);
    },
    pause: function handlePause() {
      saveState(_Video.STATE_PAUSED);
    },
    seeking: function handleSeeking(event) {
      saveTime(event.target.currentTime);
    },
    ended: function handleEnded() {
      saveState(_Video.STATE_ENDED);
    },
    error: function handleError() {
      saveState(_Video.STATE_ERROR);
    },
    contextmenu: function handleContextMenu(event) {
      event.preventDefault();
    }
  });
  (0, _useBind["default"])(documentRef, {
    click: function handleClick(event) {
      saveActive(containerRef.current.contains(event.target));
    },
    fullscreenchange: function handleFullscreenChange() {
      saveFullscreen(!!document.fullscreenElement);
    },
    keydown: function handleKeyDown(event) {
      if (!active) return;

      switch (event.code) {
        case 'Space':
          // SPACE
          event.preventDefault();
          togglePlay();
          break;

        case 'ArrowRight':
          event.preventDefault();
          adjustTime(event.shiftKey ? SEEK_AMOUNT * 6 : SEEK_AMOUNT);
          break;

        case 'ArrowLeft':
          event.preventDefault();
          adjustTime(event.shiftKey ? -SEEK_AMOUNT * 6 : -SEEK_AMOUNT);
          break;

        case 'ArrowUp':
          event.preventDefault();
          adjustVolume(VOLUME_AMOUNT);
          break;

        case 'ArrowDown':
          event.preventDefault();
          adjustVolume(-VOLUME_AMOUNT);
          break;

        case 'KeyM':
          event.preventDefault();
          toggleMute();
          break;

        default:
          break;
      }
    }
  }, [state, active]);
  (0, _react.useEffect)(function () {
    hlsRef.current.attachMedia(videoRef.current);
    hlsRef.current.on(_hls["default"].Events.MANIFEST_PARSED, function (event, _ref) {
      var levels = _ref.levels;
      saveLevels(levels);
    });
    hlsRef.current.on(_hls["default"].Events.LEVEL_SWITCHED, function (event, _ref2) {
      var level = _ref2.level;
      saveLevel(level);
    });
    return function () {
      hlsRef.current.destroy();
    };
  }, [hlsRef]);
  return {
    videoRef: videoRef,
    containerRef: containerRef,
    hlsRef: hlsRef,
    buffer: buffer,
    duration: duration,
    fullscreen: fullscreen,
    level: level,
    levels: levels,
    muted: muted,
    speed: speed,
    state: state,
    time: time,
    volume: volume,
    hasStarted: hasStarted,
    isPaused: isPaused,
    isPlaying: isPlaying,
    setLevel: setLevel,
    setTime: setTime,
    setSpeed: setSpeed,
    setVolume: setVolume,
    toggleFullscreen: toggleFullscreen,
    toggleMute: toggleMute,
    togglePlay: togglePlay
  };
};

var _default = useVideo;
exports["default"] = _default;