"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VideoContext = exports.STATE_ERROR = exports.STATE_ENDED = exports.STATE_PAUSED = exports.STATE_PLAYING = exports.STATE_IDLE = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useVideo = _interopRequireDefault(require("./useVideo"));

var _Controls = _interopRequireDefault(require("./Controls"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var STATE_IDLE = 'idle';
exports.STATE_IDLE = STATE_IDLE;
var STATE_PLAYING = 'playing';
exports.STATE_PLAYING = STATE_PLAYING;
var STATE_PAUSED = 'paused';
exports.STATE_PAUSED = STATE_PAUSED;
var STATE_ENDED = 'ended';
exports.STATE_ENDED = STATE_ENDED;
var STATE_ERROR = 'error';
exports.STATE_ERROR = STATE_ERROR;
var FIT_FIT = 'fit';
var FIT_COVER = 'cover';
var FIT_FILL = 'fill';

var VideoContext = _react["default"].createContext();

exports.VideoContext = VideoContext;

var Video = function Video(_ref) {
  var _screens, _cn;

  var passedVideoRef = _ref.videoRef,
      children = _ref.children,
      _ref$fit = _ref.fit,
      fit = _ref$fit === void 0 ? FIT_FIT : _ref$fit,
      initialTime = _ref.initialTime,
      _ref$renderControls = _ref.renderControls,
      renderControls = _ref$renderControls === void 0 ? function () {
    return _react["default"].createElement(_Controls["default"], null);
  } : _ref$renderControls,
      renderIdleScreen = _ref.renderIdleScreen,
      renderPauseScreen = _ref.renderPauseScreen,
      renderEndScreen = _ref.renderEndScreen,
      _ref$onLoadStart = _ref.onLoadStart,
      onLoadStart = _ref$onLoadStart === void 0 ? function () {} : _ref$onLoadStart,
      _ref$onLoadedMetadata = _ref.onLoadedMetadata,
      onLoadedMetadata = _ref$onLoadedMetadata === void 0 ? function () {} : _ref$onLoadedMetadata,
      _ref$onLoadedData = _ref.onLoadedData,
      onLoadedData = _ref$onLoadedData === void 0 ? function () {} : _ref$onLoadedData,
      _ref$onPlay = _ref.onPlay,
      onPlay = _ref$onPlay === void 0 ? function () {} : _ref$onPlay,
      _ref$onPause = _ref.onPause,
      onPause = _ref$onPause === void 0 ? function () {} : _ref$onPause,
      _ref$onEnded = _ref.onEnded,
      onEnded = _ref$onEnded === void 0 ? function () {} : _ref$onEnded,
      _ref$onTimeUpdate = _ref.onTimeUpdate,
      onTimeUpdate = _ref$onTimeUpdate === void 0 ? function () {} : _ref$onTimeUpdate,
      _ref$onSeeking = _ref.onSeeking,
      onSeeking = _ref$onSeeking === void 0 ? function () {} : _ref$onSeeking,
      _ref$onSeeked = _ref.onSeeked,
      onSeeked = _ref$onSeeked === void 0 ? function () {} : _ref$onSeeked,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? function () {} : _ref$onError,
      props = _objectWithoutProperties(_ref, ["videoRef", "children", "fit", "initialTime", "renderControls", "renderIdleScreen", "renderPauseScreen", "renderEndScreen", "onLoadStart", "onLoadedMetadata", "onLoadedData", "onPlay", "onPause", "onEnded", "onTimeUpdate", "onSeeking", "onSeeked", "onError"]);

  var video = (0, _useVideo["default"])();

  var handleEvent = function handleEvent(callback) {
    return function (event) {
      return callback(event, video);
    };
  };

  var screens = (_screens = {}, _defineProperty(_screens, STATE_IDLE, renderIdleScreen), _defineProperty(_screens, STATE_PAUSED, renderPauseScreen), _defineProperty(_screens, STATE_ENDED, renderEndScreen), _screens);
  var renderScreen = screens[video.state];
  var classes = (0, _classnames["default"])((_cn = {
    'mc-video': true
  }, _defineProperty(_cn, "mc-video--fit-".concat(fit), fit), _defineProperty(_cn, "mc-video--state-".concat(video.state), video.state), _cn));
  return _react["default"].createElement(VideoContext.Provider, {
    value: video
  }, _react["default"].createElement("div", {
    ref: video.containerRef,
    className: classes,
    onClick: video.togglePlay,
    onDoubleClick: video.toggleFullscreen
  }, _react["default"].createElement("video", _extends({
    ref: video.videoRef,
    className: "mc-video__video",
    crossOrigin: "anonymous",
    preload: "metadata"
  }, props, {
    onLoadStart: handleEvent(onLoadStart),
    onLoadedMetadata: handleEvent(onLoadedMetadata),
    onLoadedData: handleEvent(onLoadedData),
    onPlay: handleEvent(onPlay),
    onPause: handleEvent(onPause),
    onEnded: handleEvent(onEnded),
    onTimeUpdate: handleEvent(onTimeUpdate),
    onSeeking: handleEvent(onSeeking),
    onSeeked: handleEvent(onSeeked),
    onError: handleEvent(onError),
    controls: false
  }), (0, _helpers.renderChildren)(children, video)), renderControls(), renderScreen && _react["default"].createElement("div", {
    className: "mc-video__view mc-video__screen-view mc-video__screen-view--".concat(video.state)
  }, renderScreen())));
};

Video.propTypes = {
  children: _propTypes["default"].any,
  initialTime: _propTypes["default"].number,
  fit: _propTypes["default"].oneOf([FIT_FIT, FIT_COVER, FIT_FILL]),
  videoRef: _propTypes["default"].func,
  renderControls: _propTypes["default"].node,
  renderIdleScreen: _propTypes["default"].node,
  renderPauseScreen: _propTypes["default"].node,
  renderEndScreen: _propTypes["default"].node,
  onLoadStart: _propTypes["default"].func,
  onLoadedMetadata: _propTypes["default"].func,
  onLoadedData: _propTypes["default"].func,
  onPlay: _propTypes["default"].func,
  onPause: _propTypes["default"].func,
  onEnded: _propTypes["default"].func,
  onTimeUpdate: _propTypes["default"].func,
  onSeeking: _propTypes["default"].func,
  onSeeked: _propTypes["default"].func,
  onError: _propTypes["default"].func
};
var _default = Video;
exports["default"] = _default;