"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getClosest = exports.responsiveValues = exports.renderChildren = exports.FormatClassTitle = exports.closeFullscreen = exports.NumberToPX = exports.parseInputErrors = exports.ASPECT_RATIOS = void 0;

var _react = require("react");

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ASPECT_RATIOS = ['auto', '1x1', '2x3', '3x4', '4x3', '9x16', '16x9', '21x9'];
exports.ASPECT_RATIOS = ASPECT_RATIOS;

var parseInputErrors = function parseInputErrors(error) {
  if (!error) {
    return undefined;
  }

  if (Array.isArray(error)) {
    return error[0];
  }

  return error;
};

exports.parseInputErrors = parseInputErrors;

var NumberToPX = function NumberToPX(value) {
  return typeof value === 'number' ? "".concat(value, "px") : value;
};

exports.NumberToPX = NumberToPX;

var closeFullscreen = function closeFullscreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.mozCancelFullScreen) {
    /* Firefox */
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    /* Chrome, Safari and Opera */
    document.webkitExitFullscreen();
  } else if (document.msExitFullscreen) {
    /* IE/Edge */
    document.msExitFullscreen();
  }
};

exports.closeFullscreen = closeFullscreen;

var FormatClassTitle = function FormatClassTitle() {
  var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var instructorName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (title.toLowerCase().indexOf(instructorName.toLowerCase()) === -1) {
    return title;
  }

  return title.trim().slice(instructorName.length).trim();
};

exports.FormatClassTitle = FormatClassTitle;

var renderChildren = function renderChildren(children, props) {
  if ((0, _isFunction["default"])(children)) {
    return children(props);
  }

  var results = _react.Children.map(children, function (child) {
    return (0, _react.cloneElement)(child, _objectSpread({}, child.props, {}, props, {
      className: "".concat(child.props.className || '', " ").concat(props.className || ''),
      onClick: child.props.onClick || props.onClick ? function (event) {
        if (child.props.onClick) {
          child.props.onClick(event);
        }

        if (props.onClick) {
          props.onClick(event);
        }
      } : undefined
    }));
  });

  return results;
};

exports.renderChildren = renderChildren;

var undefinedFallback = function undefinedFallback() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var value = args[0],
      others = args.slice(1);

  if ((0, _isUndefined["default"])(value)) {
    return undefinedFallback.apply(void 0, _toConsumableArray(others));
  }

  return value;
};

var responsiveValues = function responsiveValues(_ref, lg, md, sm, xs) {
  var gteLG = _ref.gteLG,
      gteMD = _ref.gteMD,
      gteSM = _ref.gteSM;

  if (gteLG) {
    return undefinedFallback(lg, md, sm, xs);
  }

  if (gteMD) {
    return md;
  }

  if (gteSM) {
    return sm;
  }

  return xs;
};

exports.responsiveValues = responsiveValues;

var getClosest = function getClosest(elem, selector) {
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
  }

  var check = elem; // Get closest match

  for (; check && check !== document; check = check.parentNode) {
    if (check.matches(selector)) return check;
  }

  return null;
};

exports.getClosest = getClosest;
var _default = {
  closeFullscreen: closeFullscreen,
  FormatClassTitle: FormatClassTitle,
  getClosest: getClosest,
  NumberToPX: NumberToPX,
  parseInputErrors: parseInputErrors,
  renderChildren: renderChildren,
  responsiveValues: responsiveValues
};
exports["default"] = _default;