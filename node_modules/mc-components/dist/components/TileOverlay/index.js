"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TileOverlay =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(TileOverlay, _PureComponent);

  function TileOverlay() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TileOverlay);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TileOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "getStyles", function () {
      var _this$props = _this.props,
          color = _this$props.color,
          type = _this$props.type;
      if (!color) return {};

      if (type === 'solid') {
        return {
          background: "rgba(".concat(color, ", 0.8)")
        };
      }

      if (type === 'gradient-bottom') {
        return {
          background: "\n          linear-gradient(\n            to top,\n            rgba(".concat(color, ", 1) 0,\n            rgba(").concat(color, ", 0.6) 25%,\n            rgba(").concat(color, ", 0) 45%\n          ) center no-repeat\n        ")
        };
      }

      if (type === 'gradient-left') {
        return {
          background: "\n          linear-gradient(\n            to right,\n            rgba(".concat(color, ", 1) 12%,\n            rgba(").concat(color, ", 0.9) 20%,\n            rgba(").concat(color, ", 0) 45%\n          ) center no-repeat\n        ")
        };
      }

      if (type === 'spotlight') {
        return {
          background: "\n          radial-gradient(\n            farthest-side at center top,\n            rgba(".concat(color, ", 0) 33%,\n            rgba(").concat(color, ", 1) 100%\n          ),\n          linear-gradient(\n            to right,\n            rgba(").concat(color, ", 1) 0%,\n            rgba(").concat(color, ", 0) 10%\n          ),\n          linear-gradient(\n            to left,\n            rgba(").concat(color, ", 1) 0%,\n            rgba(").concat(color, ", 0) 10%\n          );\n        ")
        };
      }

      return {};
    });

    return _this;
  }

  _createClass(TileOverlay, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          className = _this$props2.className,
          type = _this$props2.type;
      var classes = ['mc-tile__component', 'mc-tile-overlay', "mc-tile-overlay--".concat(type), className || ''].join(' ');
      var styles = this.getStyles();
      return _react["default"].createElement("div", {
        className: classes,
        style: styles
      }, children);
    }
  }]);

  return TileOverlay;
}(_react.PureComponent);

exports["default"] = TileOverlay;

_defineProperty(TileOverlay, "propTypes", {
  children: _constants.PROP_TYPE_CHILDREN,
  className: _propTypes["default"].string,
  color: _propTypes["default"].string,
  type: _propTypes["default"].oneOf(['gradient-bottom', 'gradient-left', 'spotlight', 'solid'])
});

_defineProperty(TileOverlay, "defaultProps", {
  type: 'gradient-bottom',
  color: null
});